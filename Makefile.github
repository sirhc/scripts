GH       = env GH_PAGER= gh
MR       = mr -m -j$(JOBS)
MRCONFIG = .mrconfig
OWNER    = $(notdir $(PWD))
SHELL    = zsh
IS_FORK  = false
JOBS     = $(shell nproc --all)

MLR_ALWAYS_COLOR = true
export MLR_ALWAYS_COLOR

define GH_GRAPHQL_REPOS
query($$owner: String! $$isFork: Boolean! $$endCursor: String) {
  repositoryOwner(login: $$owner) {
    repositories(first: 100 ownerAffiliations: OWNER isFork: $$isFork orderBy: { field: NAME direction: ASC } after: $$endCursor) {
      totalCount
      pageInfo { hasNextPage endCursor }
      nodes { nameWithOwner }
    }
  }
}
endef
export GH_GRAPHQL_REPOS

all: clone register fetch gc

branches:
	$(MAKE) -s branches-csv | mlr --icsv --opprint filter -e '$$Branch != $$DefaultBranch'

branches-csv:
	print 'Repository,Branch,DefaultBranch'
	$(MR) run command -- $(SHELL) -c 'git rev-parse --abbrev-ref HEAD; git rev-parse --abbrev-ref origin/HEAD | sed "s@^origin/@@"' | sed -e 's,mr run: .*/,,' -e '/^$$/d' | paste -d',' - - -

branches-local:
	$(MR) run command -- $(SHELL) -c 'git branch -vv | cut -c3- | awk "(\$$1 != \"$$( git rev-parse --abbrev-ref origin/HEAD | sed "s@^origin/@@" )\") { print }"'

clone:
	$(MAKE) -s _repos | $(MAKE) -s _clone
	$(MAKE) -s _repos IS_FORK=true | $(MAKE) -s _clone

fetch:
	$(MR) fetch

gc:
	$(MR) gc --auto --quiet

prune:
	$(MR) prunebranches

register:
	touch $(MRCONFIG)
	printf '%s\n' */.git(D/:h) | parallel -j 1 'grep -q "^\[{}\]" $(MRCONFIG) || mr register {} 2>/dev/null || :'

update:
	$(MR) update --quiet

_clone:
	parallel '[[ -d "$$( basename "{}" )" ]] || $(GH) repo clone "{}"'

_repos:
	$(GH) api graphql --paginate -q '.data.repositoryOwner.repositories.nodes[] | .nameWithOwner' -F owner='$(OWNER)' -F isFork='$(IS_FORK)' -f query="$$GH_GRAPHQL_REPOS"
